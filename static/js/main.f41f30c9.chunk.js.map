{"version":3,"sources":["App.js","theme.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","height","media","MediaCard","props","classes","Card","className","CardContent","Typography","gutterBottom","variant","component","Link","color","href","article","downloadUrl","title","description","Results","Component","App","onSelectionChange","event","values","setState","selection","state","coreIds","articles","level2","level3","fetch","method","headers","body","JSON","stringify","then","res","json","data","articlesToDisplay","catch","console","log","functions","bind","articleCards","this","map","Grid","item","id","Container","Box","my","Autocomplete","options","sort","a","b","localeCompare","groupBy","option","getOptionLabel","style","width","onChange","renderInput","params","TextField","label","container","spacing","direction","justify","alignItems","Items","forEach","Level2","S","Level3","CoreId","find","push","theme","createMuiTheme","typography","fontFamily","join","palette","primary","main","secondary","error","type","background","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.f41f30c9.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\n\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Pagination from '@material-ui/lab/Pagination';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n    height: '100%'\n  },\n  media: {\n    height: 140,\n  },\n});\n\nfunction MediaCard(props) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          <Link\n            color=\"primary\"\n            href={props.article.downloadUrl}\n          >\n            {props.article.title}\n          </Link>\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {props.article.description}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nclass Results extends Component {\n  render() {\n    return (\n      <div></div>\n    )\n  }\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onSelectionChange = this.onSelectionChange.bind(this);\n  }\n\n  onSelectionChange = (event, values) => {\n    this.setState({\n      selection: values\n    }, () => {\n      //if the selection is X'd out, just fetch original articles\n      if (this.state.selection == null) {\n        this.setState({ articlesToDisplay: [] })\n        return;\n      }\n      //show articles filtered by selected label\n\n      let coreIds = this.state.articles[this.state.selection.level2][this.state.selection.level3];\n\n      //query core api for details for each coreid in the coreids array.\n\n      fetch('https://core.ac.uk:443/api-v2/articles/get?metadata=true&fulltext=false&citations=false&similar=false&duplicate=false&urls=true&faithfulMetadata=false&apiKey=0RJ98zruXYjW76EThkvwH1s3CycAoleb', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(coreIds)\n      })\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ articlesToDisplay: data })\n      })\n      .catch(console.log);\n\n    });\n  }\n\n  render() {\n\n    const articleCards = this.state.articlesToDisplay.map((article) =>\n      <Grid item key={article.data.id}><MediaCard article={article.data} /></Grid>\n    );\n\n    return (\n      <Container maxWidth=\"lg\">\n        <Box my={4}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            How does nature...\n          </Typography>\n          <Autocomplete\n            id=\"function\"\n            options={this.state.functions.sort((a, b) => -b.level2.localeCompare(a.level2))}\n            groupBy={(option) => option.level2}\n            getOptionLabel={(option) => option.level3}\n            style={{ width: 300 }}\n            onChange={this.onSelectionChange}\n            renderInput={(params) => <TextField {...params} label=\"\" variant=\"outlined\" />}\n          />\n        </Box>\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"stretch\"\n        >\n        {articleCards}\n        </Grid>\n        <Results />\n      </Container>\n    )\n  }\n  \n  state = {\n    selection: [],\n    functions: [],\n    articles: {},\n    articlesToDisplay: []\n  };\n\n  componentDidMount() {\n    // connect to petal-api to fetch articles list.\n    fetch('https://unbqm6hov8.execute-api.us-east-2.amazonaws.com/v1/getallarticles')\n    .then(res => res.json())\n    .then((data) => {\n\n      let articles = {};\n      let functions = [];\n      let articlesRaw = data.Items;\n\n      articlesRaw.forEach(article => {\n        articles[article.Level2.S] = articles[article.Level2.S] || {};\n        articles[article.Level2.S][article.Level3.S] = [article.CoreId.S];\n        //search the functions array and try to find an object with level3 and level2 keys with values that match this article's level2 and level3 values. If one does not exist add a new object to the array.\n\n        let funcExists = functions.find(item => {\n          if (item.level2 == article.Level2.S && item.level3 == article.Level3.S) {\n            return true;\n          }\n          return false;\n        });\n\n        if(!funcExists) {\n          functions.push({\n            level2: article.Level2.S,\n            level3: article.Level3.S,\n          });\n        }\n      });\n\n      this.setState({ functions: functions })\n      this.setState({ articles: articles })\n    })\n    .catch(console.log)\n  }\n\n}\n\nexport default App;\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      '\"Helvetica Neue\"',\n      'Helvetica',\n      'Roboto',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n  },\n  palette: {\n    primary: {\n      main: '#9bdaf1',\n    },\n    secondary: {\n      main: '#dd361c',\n    },\n    error: {\n      main: '#dd361c',\n    },\n    type: 'dark',\n    background: {\n      //default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}